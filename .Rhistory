}
points[, j] <- probs * attack_strategy
}
barplot(colMeans(points), main = "Average number of points", sub = "Defence always against two", cex.axis = .7)
colMeans(points)[which.max(colMeans(points))]
n <- 10000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
probs <- rep(NA, n)
for(i in 1:n) {
probs[i] <- score_prob(attack = attack_strategy[i], defence = def_strategy[i])
}
points[, j] <- probs * attack_strategy
}
cl <- parallel::makeCluster(3)
probs <- parallel::parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
clusterExport(cl, "score_prob") #define custom function
probs <- parallel::parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
clusterExport(cl, "score_prob") #define custom function
parallel::clusterExport(cl, "score_prob") #define custom function
probs <- parallel::parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
attack_strategy
parallel::clusterExport(cl, c("score_prob", "attack_strategy", "def_strategy")) #define custom function
probs <- parallel::parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
probs
n <- 10000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
#do in parallel to make faster
cl <- parallel::makeCluster(3)
parallel::clusterExport(cl, c("score_prob", "attack_strategy", "def_strategy")) #define custom function
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
probs <- parallel::parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
# for(i in 1:n) {
#   probs[i] <- score_prob(attack = attack_strategy[i], defence = def_strategy[i])
# }
points[, j] <- probs * attack_strategy
}
barplot(colMeans(points), main = "Average number of points", sub = "Defence always against two", cex.axis = .7)
colMeans(points)[which.max(colMeans(points))]
rmarkdown::render(input = "./scr/week03_2020.Rmd",
output_format = "html_document",
output_file = "week03_2020.html",
output_dir = "./docs/")
library(parallel)
n <- 1000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
#do in parallel to make faster
cl <- makeCluster(3)
clusterExport(cl, c("score_prob", "attack_strategy", "def_strategy")) #define custom function
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
probs <- parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
# for(i in 1:n) {
#   probs[i] <- score_prob(attack = attack_strategy[i], defence = def_strategy[i])
# }
points[, j] <- probs * attack_strategy
}
barplot(colMeans(points), main = "Average number of points", sub = "Defence random", cex.axis = .7)
colMeans(points)[which.max(colMeans(points))]
n <- 1000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
#do in parallel to make faster
cl <- makeCluster(3)
clusterExport(cl, c("score_prob", "attack_strategy", "def_strategy")) #define custom function
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
probs <- parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
# for(i in 1:n) {
#   probs[i] <- score_prob(attack = attack_strategy[i], defence = def_strategy[i])
# }
points[, j] <- probs * attack_strategy
}
barplot(colMeans(points), main = "Average number of points", sub = "Defence random", cex.axis = .7)
colMeans(points)[which.max(colMeans(points))]
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(parallel)
#do in parallel to make faster
cl <- makeCluster(3)
rm(list = ls())
n <- 1000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(parallel)
#do in parallel to make faster
cl <- makeCluster(3)
#probabilities with which we will score under different scenarios
one_defend <- .9
one_no_defend <- 1
two_defend <- .4
two_no_defend <- .6
#sequence of possible probabilities
prob_of_one <- seq(0, 1, 0.01)
score_prob <- function(attack, defence) {
#define prob of scoring
one_defend <- .9
one_no_defend <- 1
two_defend <- .4
two_no_defend <- .6
df <- data.frame(possible_outcomes = c(11, 12, 21, 22),
prob = c(.9, 1, .6, .4))
outcome <- as.numeric(paste0(attack, defence, collapse = ""))
df[df$possible_outcomes == outcome, "prob"]
}
n <- 1000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- sample(c(1,2), size = n, replace = TRUE)
clusterExport(cl, c("score_prob", "attack_strategy", "def_strategy")) #define custom function
#average number of points
probs <- parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
points[, j] <- probs * attack_strategy
}
barplot(colMeans(points), main = "Average number of points", sub = "Defence random", cex.axis = .7)
colMeans(points)[which.max(colMeans(points))]
n <- 10000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- rep(1, n)
if(prob > 0.5) def_strategy <- rep(2, n)
if(prob == 0.5) def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
probs <- parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
points[, j] <- probs * attack_strategy
}
probs
summary(unlist(probs))
summary(def_strategy)
summary(attack_strategy)
table(attack_strategy)
table(def_strategy)
#average number of points
probs <- parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
head(probs)
n
i
cl
parallel::stopCluster()
parallel::stopCluster(cl)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(parallel)
#do in parallel to make faster
cl <- makeCluster(3)
n <- 10000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- rep(1, n)
if(prob > 0.5) def_strategy <- rep(2, n)
if(prob == 0.5) def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
probs <- parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
points[, j] <- probs * attack_strategy
}
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(parallel)
#do in parallel to make faster
cl <- makeCluster(3)
clusterExport(cl, c("score_prob", "attack_strategy", "def_strategy")) #define custom function
#probabilities with which we will score under different scenarios
one_defend <- .9
one_no_defend <- 1
two_defend <- .4
two_no_defend <- .6
#sequence of possible probabilities
prob_of_one <- seq(0, 1, 0.01)
score_prob <- function(attack, defence) {
#define prob of scoring
one_defend <- .9
one_no_defend <- 1
two_defend <- .4
two_no_defend <- .6
df <- data.frame(possible_outcomes = c(11, 12, 21, 22),
prob = c(.9, 1, .6, .4))
outcome <- as.numeric(paste0(attack, defence, collapse = ""))
df[df$possible_outcomes == outcome, "prob"]
}
n <- 10000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- rep(1, n)
if(prob > 0.5) def_strategy <- rep(2, n)
if(prob == 0.5) def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
probs <- parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
points[, j] <- probs * attack_strategy
}
barplot(colMeans(points), main = "Average number of points", sub = "Defence conversion with higher prob", cex.axis = .7)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(parallel)
#do in parallel to make faster
cl <- makeCluster(3)
clusterExport(cl, c("score_prob", "attack_strategy", "def_strategy")) #define custom function
#probabilities with which we will score under different scenarios
one_defend <- .9
one_no_defend <- 1
two_defend <- .4
two_no_defend <- .6
#sequence of possible probabilities
prob_of_one <- seq(0, 1, 0.01)
score_prob <- function(attack, defence) {
#define prob of scoring
one_defend <- .9
one_no_defend <- 1
two_defend <- .4
two_no_defend <- .6
possible_outcomes <- c(11, 12, 21, 22)
prob <- c(.9, 1, .6, .4)
outcome <- as.numeric(paste0(attack, defence, collapse = ""))
prob[possible_outcomes == outcome]
}
n <- 10000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- rep(1, n)
if(prob > 0.5) def_strategy <- rep(2, n)
if(prob == 0.5) def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
probs <- parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
points[, j] <- probs * attack_strategy
}
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(parallel)
#do in parallel to make faster
cl <- makeCluster(detectCores()-1)
clusterExport(cl, c("score_prob", "attack_strategy", "def_strategy")) #define custom function
n <- 5000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- rep(1, n)
if(prob > 0.5) def_strategy <- rep(2, n)
if(prob == 0.5) def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
probs <- parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
points[, j] <- probs * attack_strategy
}
barplot(colMeans(points), main = "Average number of points", sub = "Defence conversion with higher prob", cex.axis = .7)
colMeans(points)[which.max(colMeans(points))]
rmarkdown::render(input = "./scr/week03_2020.Rmd",
output_format = "html_document",
output_file = "week03_2020.html",
output_dir = "./docs/")
n <- 5000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- rep(1, n)
if(prob > 0.5) def_strategy <- rep(2, n)
if(prob == 0.5) def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
probs <- sapply(c(1:n), function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
points[, j] <- probs * attack_strategy
}
barplot(colMeans(points), main = "Average number of points", sub = "Defence conversion with higher prob", cex.axis = .7)
colMeans(points)[which.max(colMeans(points))]
rmarkdown::render(input = "./scr/week03_2020.Rmd",
output_format = "html_document",
output_file = "week03_2020.html",
output_dir = "./docs/")
knitr::opts_chunk$set(echo = TRUE)
n <- 50000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
clusterExport(cl, c("score_prob", "attack_strategy", "def_strategy")) #define custom function
probs <- parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
points[, j] <- probs * attack_strategy
}
barplot(colMeans(points), main = "Average number of points", sub = "Defence random", cex.axis = .7)
colMeans(points)[which.max(colMeans(points))]
n <- 100000
.0.4*2+0.6*2
0.4*2+0.6*2
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
clusterExport(cl, c("score_prob", "attack_strategy", "def_strategy")) #define custom function
probs <- parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
points[, j] <- probs * attack_strategy
}
barplot(colMeans(points), main = "Average number of points", sub = "Defence random", cex.axis = .7)
colMeans(points)[which.max(colMeans(points))]
mean(.9,1)
mean(.4*2,.6*2)
.6*2
.4*2
n <- 100000
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- rep(1, n)
if(prob > 0.5) def_strategy <- rep(2, n)
if(prob == 0.5) def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
clusterExport(cl, c("score_prob", "attack_strategy", "def_strategy")) #define custom function
probs <- parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
points[, j] <- probs * attack_strategy
}
barplot(colMeans(points), main = "Average number of points", sub = "Defence conversion with higher prob", cex.axis = .7)
colMeans(points)[which.max(colMeans(points))]
j
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
prob
#define defence strategy
def_strategy <- sample(c(1,2), size = n, replace = TRUE)
table(def_strategy)
table(attack_strategy)
score_prob(2,1)
score_prob(2,2)
score_prob(1,1)
score_prob(1,2)
points <- matrix(NA, ncol = length(prob_of_one), nrow = n)
colnames(points) <- prob_of_one
for(j in 1:length(prob_of_one)) {
prob <- prob_of_one[j]
#generate random numbers to go either for one point or two point attack
#0 is atack one point and 1 means attack two points
attack_strategy <- rbinom(n = n, size = 1, prob = prob)
#recode to number of points a team can win from an attack
attack_strategy <- ifelse(attack_strategy == 0, 1, 2)
#define defence strategy
def_strategy <- sample(c(1,2), size = n, replace = TRUE)
#average number of points
clusterExport(cl, c("score_prob", "attack_strategy", "def_strategy")) #define custom function
probs <- parSapply(cl = cl, X = c(1:n), FUN = function(i) {
score_prob(attack = attack_strategy[i], defence = def_strategy[i])
})
points[, j] <- probs * attack_strategy
}
barplot(colMeans(points), main = "Average number of points", sub = "Defence random", cex.axis = .7)
colMeans(points)[which.max(colMeans(points))]
score_prob(2,1)
score_prob(2,1) * 2
score_prob(2,2) * 2
score_prob(1,2) * 1
score_prob(1,1) * 1
mean(1,0.9)
mean(c(1,0.9))
rmarkdown::render(input = "./scr/week03_2020.Rmd",
output_format = "html_document",
output_file = "week03_2020.html",
output_dir = "./docs/")
mean(colMeans(points))
rm(list = ls)
rm(list = ls())
rmarkdown::render(input = "./scr/week03_2020.Rmd",
output_format = "html_document",
output_file = "week03_2020.html",
output_dir = "./docs/")
